{{- /*gotype: distributed-kv-db/cmd/tstmckgen.renderDetail*/ -}}
package {{.PackageName}}

// Code generated by tstmckgen DO NOT EDIT.

type {{.Name}}[{{.AllGenericTypeNamesStr}} any] struct {
    {{- range $in := .Ins}}
        {{$in.VarName}}Hook func(t {{$in.GenericTypeName}})
    {{- end}}
    {{- range $out := .Outs}}
        {{$out.VarName}} func() {{$out.GenericTypeName}}
    {{- end}}
}

{{define "funcWithGenericVars"}}{{.Name}}[{{.AllGenericTypeNamesStr}}]{{end}}
{{define "funcSignature"}}func(
	{{- range $in := .Ins}}
        {{- $in.VarName}} {{$in.GenericTypeName}},
    {{- end}}) ({{.OutGenericTypeNamesStr}}){{end}}

func New{{.Name}}Like[{{.AllGenericTypeNamesStr}} any](_ {{template "funcSignature" $}}) {{template "funcWithGenericVars" $}} {
    return {{template "funcWithGenericVars" $}}{
        {{- range $in := .Ins}}
            {{$in.VarName}}Hook: func(t {{$in.GenericTypeName}}) {},
        {{- end}}
        {{- range $out := .Outs}}
                {{$out.VarName}}: func() (_ {{$out.GenericTypeName}}) { return },
        {{- end}}
    }
}

{{- range $in := .Ins}}
    func (f {{template "funcWithGenericVars" $}}) Capture{{$in.GenericTypeName}}(x *{{$in.GenericTypeName}}) {{template "funcSignature" $}} {
        f.{{$in.VarName}}Hook = func(t {{$in.GenericTypeName}}) {
            *x = t
        }
        return f.Build()
    }
{{- end}}

func (f {{template "funcWithGenericVars" $}}) CheckIsCalled(isCalled *bool) {{template "funcSignature" $}} {
    f.{{(index .Ins 0).VarName}}Hook = func(t {{(index .Ins 0).GenericTypeName}}) {
        *isCalled = true
    }
    return f.Build()
}

{{- range $in := .Ins}}
    func (f {{template "funcWithGenericVars" $}}) CaptureAll{{$in.GenericTypeName}}(x *[]{{$in.GenericTypeName}}) {{template "funcSignature" $}} {
        f.{{$in.VarName}}Hook = func(t {{$in.GenericTypeName}}) {
            *x = append(*x, t)
        }
        return f.Build()
    }
{{- end}}

{{- range $out := .Outs}}
    func (f {{template "funcWithGenericVars" $}}) Return{{$out.GenericTypeName}}(x {{$out.GenericTypeName}}) {{template "funcSignature" $}} {
        f.{{$out.VarName}} = func() {{$out.GenericTypeName}} {
            return x
        }
        return f.Build()
    }
{{- end}}

{{- range $out := .Outs}}
    func (f {{template "funcWithGenericVars" $}}) ReturnAll{{$out.GenericTypeName}}(xs []{{$out.GenericTypeName}}) {{template "funcSignature" $}} {
        results := make([]{{$out.GenericTypeName}}, len(xs))
        copy(results, xs)

        f.{{$out.VarName}} = func() {{$out.GenericTypeName}} {
            x := results[0]
            results = results[1:]
            return x
        }
        return f.Build()
    }
{{- end}}

func (f {{template "funcWithGenericVars" $}}) Build() {{template "funcSignature" $}} {
    return {{template "funcSignature" $}} {
		{{- range $in := .Ins}}
            f.{{$in.VarName}}Hook({{$in.VarName}})
        {{- end}}

        return {{range $i, $out := .Outs}}{{if $i}},{{end}}f.{{$out.VarName}}(){{end}}
    }
}
