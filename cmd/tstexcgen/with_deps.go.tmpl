{{- /*gotype: distributed-kv-db/cmd/tstexcgen.renderDetail*/ -}}
package {{.PackageName}}

// Code generated by tstexcgen DO NOT EDIT.

type {{.Name}}[{{.AllGenericTypeNamesStr}} any] struct {
	execute func({{.DepGenericTypeNamesStr}}) func({{.InGenericTypeNamesStr}}) ({{.OutGenericTypeNamesStr}})
	{{- range $dep := .Deps}}
        {{$dep.VarName}} {{$dep.GenericTypeName -}}
    {{- end}}
    {{- range $in := .Ins}}
        {{$in.VarName}} {{$in.GenericTypeName -}}
    {{- end}}
}

{{define "funcWithGenericVars"}}{{.Name}}[{{.AllGenericTypeNamesStr}}]{{end}}

func New{{.Name}}[{{.AllGenericTypeNamesStr}} any](f func({{.DepGenericTypeNamesStr}}) func({{.InGenericTypeNamesStr}}) ({{.OutGenericTypeNamesStr}})) {{.Name}}[{{.AllGenericTypeNamesStr}}] {
    return {{template "funcWithGenericVars" $}}{execute: f}
}

func (f {{template "funcWithGenericVars" $}}) Execute(options ...func({{template "funcWithGenericVars" $}}) {{template "funcWithGenericVars" $}}) ({{.OutGenericTypeNamesStr}}) {
    g := f
    for _, option := range options {
        g = option(g)
    }
    return g.execute({{range $v := .Deps}}g.{{$v.VarName}},{{end}})({{range $v := .Ins}}g.{{$v.VarName}},{{end}})
}

{{range $v := .RenderDefaultVars}}
    func (f {{template "funcWithGenericVars" $}}) Default{{$v.Name}}(x {{$v.GenericTypeName}}) {{template "funcWithGenericVars" $}} {
        g := f
        g.{{$v.VarName}} = x
        return g
    }
{{end}}

{{range $v := .RenderDefaultVars}}
    func ({{template "funcWithGenericVars" $}}) With{{$v.Name}}(x {{$v.GenericTypeName}}) func({{template "funcWithGenericVars" $}}) {{template "funcWithGenericVars" $}} {
        return func(f {{template "funcWithGenericVars" $}}) {{template "funcWithGenericVars" $}} {
            return f.Default{{$v.Name}}(x)
        }
    }
{{end}}
